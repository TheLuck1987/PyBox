<div class="modal" tabindex="-1" role="dialog" style="display: block;">
    @if (!ModalIsForm)
    {
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@(() => Close(true))"></button>
                </div>
                <div class="modal-body">
                    @ModalBody
                </div>
                <div class="modal-footer">
                    @if (!HideCancelButton)
                    {
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="@(() => Close(true))">Close</button>
                    }
                    <button type="button" class="btn btn-@ConfirmCssColor" @onclick="@(() => Close(false))">@ConfirmLable</button>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@Title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="@(() => CloseForm(true))"></button>
                </div>
                @if (FormObject != null && ModalBody != null)
                {
                    <EditForm Model=@FormObject OnValidSubmit=@(() => CloseForm(false))>
                        @if (FormValidator == null)
                        {
                            <DataAnnotationsValidator />
                        }
                        else
                        {
                            @FormValidator
                        }
                        <div class="modal-body">
                            @ModalBody
                        </div>
                        <div class="modal-footer">
                            @if (!HideCancelButton)
                            {
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick=@(() => CloseForm(true))>Close</button>
                            }
                            <button type="submit" class="btn btn-@ConfirmCssColor">@ConfirmLable</button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="modal-body">
                        No form data received
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" @onclick="@(() => CloseForm(false))">Close</button>
                    </div>
                }
                @if (FormAlertClass != null && FormAlertMessage != null)
                {
                    <div class="alert alert-@FormAlertClass" role="alert">
                        @FormAlertMessage
                    </div>
                }
            </div>
        </div>
    }
</div>


@code {
    #region Inputs
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public RenderFragment? ModalBody { get; set; }
    [Parameter]
    public RenderFragment? FormValidator { get; set; } = null;
    [Parameter]
    public string CancellationLable { get; set; } = "Cancel";
    [Parameter]
    public string ConfirmLable { get; set; } = "Ok";
    [Parameter]
    public string ConfirmCssColor { get; set; } = "primary";
    [Parameter]
    public bool HideCancelButton { get; set; } = false;
    [Parameter]
    public bool ModalIsForm { get; set; } = false;
    [Parameter]
    public object? FormObject { get; set; } = null;
    [Parameter]
    public string? FormAlertClass { get; set; } = null;
    [Parameter]
    public string? FormAlertMessage { get; set; } = null;
    #endregion

    private async Task Close(bool cancelClicked)
    {
        await OnExit.InvokeAsync(new() { CancelClicked = cancelClicked });
    }

    private async Task CloseForm(bool cancelClicked)
    {
        if (cancelClicked)
            FormObject = null;
        await OnExit.InvokeAsync(new() { CancelClicked = cancelClicked, Result = FormObject });
    }

    #region Outputs
    [Parameter]
    public EventCallback<ModalResult> OnExit { get; set; }
    #endregion
}
